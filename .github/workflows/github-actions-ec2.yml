name: Push-to-EC2

# Trigger deployment only on push to master branch
on:
  push:
    branches:
      - master

jobs:
  build:
    name: Deploy to EC2 on master branch push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the files
        uses: actions/checkout@v2

      - name: Copy files to server
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.HOST_DNS }}
          REMOTE_USER: ${{ secrets.USERNAME }}
          TARGET: ${{ secrets.TARGET_DIR }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Deploy in EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY  }}
          HOSTNAME: ${{ secrets.HOST_DNS  }}
          USER_NAME: ${{ secrets.USERNAME  }}

        run: |
          echo "$EC2_SSH_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOST_DNS} '

            #Now we have got the access of EC2 and we will start the deploy .
            cd /home/ubuntu/CounterApp &&
            git checkout master &&
            git fetch --all &&
            git reset --hard origin/master &&
            git pull origin master &&
            docker-compose -f docker-compose.prod.yml up -d --build
    # name: Push-to-EC2

# # Trigger deployment only on push to master branch
# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   deploy:
#     name: Deploy to EC2 on master branch push
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout the files
#         uses: actions/checkout@v2

#       - name: Deploy to EC2 Server
#         uses: easingthemes/ssh-deploy@main
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
#           REMOTE_HOST: ${{ secrets.HOST_DNS }}
#           REMOTE_USER: ${{ secrets.USERNAME }}
#           TARGET: ${{ secrets.TARGET_DIR }}

#       - name: Start containers
#         run: docker-compose -f docker-compose.prod.yml up -d --build

# Deploy:
#   needs: build
#   runs-on: ubuntu-latest

#   steps:
